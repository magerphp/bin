#!/usr/bin/env php
<?php
//
// gitcleaner
// copyright (c) Rob Simmons 2017
//
// Wizard to delete some/all of the "untracked files" in your git status.
//
// Some background:
//
// git clean -n
//   lists the files "git clean -df" would delete
//
// git clean -df
//   deletes all files in the "untracked files" section of your git status
//
// If you like the output of "git clean -n", run "git clean -df".
//
// If you don't like the outut of "git clean -n", use gitcleaner! It lets you easily pick and choose which untracked files to delete.
//
//
// Usage:
// $ cd my_git_repo
// $ gitcleaner
// 


$foundGitRepo = cdToGitRepo();
if ($foundGitRepo) {
    $confirmedGitRepo = confirmGitRepo($foundGitRepo);
    if ($confirmedGitRepo) {
        $untrackedFiles = getUntrackedFiles();
        if ($untrackedFiles) {
            $queuedForDerezz = promptPerUntrackedFiles($untrackedFiles);
            if ($queuedForDerezz) {
                $derezzConfirmed = confirmDerezz($queuedForDerezz);
                if ($derezzConfirmed) {
                    derezz($queuedForDerezz);
                    echo "Files derezzed.\n";
                } else {
                    echo "No files derezzed\n";
                }
            } else {
                echo "No files derezzed\n";
            }
        } else {
            echo "No files to derezz\n";
        }
    } else {
        echo "Exiting\n";
    }
} else {
    echo "No git repo found\n";
}



/**
 * cd to nearest directory with a .git repo, and return the directoryname containing a .git, or false
 * 
 * @return false|string
 */
function cdToGitRepo() {
    $foundGitRepo = getcwd();
    if (!file_exists('.git')) {
        while (!file_exists('.git') && file_exists('..')) {
            chdir('..');
            //echo "cwd " . getcwd() . "\n";
        }
        
        if (file_exists('.git')) {
            $foundGitRepo = getcwd();
        } else {
            $foundGitRepo = false;
        }
    }
    
    return $foundGitRepo;
}


/**
 * prompt user about the found git repo
 * 
 * @return bool
 */
function confirmGitRepo($foundGitRepo) {
    echo "Found git repo $foundGitRepo. Is this correct? [Yn] ";
    $userInput = getUserInput();
    return $userInput;
}


/**
 * Get list of untracked files
 *
 * @return array
 */
function getUntrackedFiles() {
    $untrackedFiles = shell_exec('git ls-files --others --exclude-standard');
    $untrackedFiles = explode("\n", $untrackedFiles);
    array_pop($untrackedFiles); // gets rid of extra trailing line
    //print_r($untrackedFiles);
    return $untrackedFiles;
}


/**
 * Iterate over the list, using the individual prompter, gather and return results
 *
 * @param array $untrackedFiles
 * @return array
 */
function promptPerUntrackedFiles(array $untrackedFiles) {
    $queuedForDerezz = [];
    foreach ($untrackedFiles as $untrackedFile) {
        $derezz = promptPerUntrackedFile($untrackedFile);
        if ($derezz) {
            $queuedForDerezz[] = $untrackedFile;
        }
    }

    //print_r($queuedForDerezz);
    return $queuedForDerezz;
}


/**
 * The individual file prompter
 *
 * @param string $untrackedFile
 * @return false|string
 */
function promptPerUntrackedFile($untrackedFile) {
    echo "Delete $untrackedFile? [Yn] ";
    $userInput = getUserInput();
    return $userInput;
}


/**
 * Are you sure? Is that your final answer?
 * 
 * @param array @queuedForDerezz
 * @return bool
 */
function confirmDerezz(array $queuedForDerezz) {
    echo "The following are queued for deresolution:\n";
    foreach ($queuedForDerezz as $file) {
        echo "$file\n";
    }
    echo "Confirm deresolution? [Yn] ";
    
    $userInput = getUserInput();
    return $userInput;
}


/**
 * Get the user's input turned into a boolean
 * 
 * @return bool
 */
function getUserInput() {
    $handle = fopen("php://stdin", "r");
    $userInput = trim(fgets($handle));
    fclose($handle);
    
    $bool = $userInput === '' || strtolower($userInput) === 'y' || strtolower($userInput) === 'yes';
    return $bool;
}


/**
 * Delteded! Unlinked! Kaput!
 * 
 * @param array $queuedForDerezz
 */
function derezz(array $queuedForDerezz) {
    foreach ($queuedForDerezz as $file) {
        unlink($file);
    }
}

